// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package ploioproto is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ApplicationCreate
	ApplicationGet
	ApplicationList
	Application
	Pipeline
	PipelineGet
	PipelineList
	PipelineCreate
	Step
	StepGet
	StepList
	EnvVar
	Volume
	Cluster
	ClusterGet
	ClusterList
*/
package ploioproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StepType int32

const (
	StepType_Deploy            StepType = 0
	StepType_DeployBlueGreen   StepType = 1
	StepType_DeployCanary      StepType = 2
	StepType_DeployManualCheck StepType = 3
	StepType_ManualCheck       StepType = 4
)

var StepType_name = map[int32]string{
	0: "Deploy",
	1: "DeployBlueGreen",
	2: "DeployCanary",
	3: "DeployManualCheck",
	4: "ManualCheck",
}
var StepType_value = map[string]int32{
	"Deploy":            0,
	"DeployBlueGreen":   1,
	"DeployCanary":      2,
	"DeployManualCheck": 3,
	"ManualCheck":       4,
}

func (x StepType) String() string {
	return proto.EnumName(StepType_name, int32(x))
}
func (StepType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EnvVarType int32

const (
	EnvVarType_ConfigMap EnvVarType = 0
)

var EnvVarType_name = map[int32]string{
	0: "ConfigMap",
}
var EnvVarType_value = map[string]int32{
	"ConfigMap": 0,
}

func (x EnvVarType) String() string {
	return proto.EnumName(EnvVarType_name, int32(x))
}
func (EnvVarType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ApplicationCreate struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Owner    string `protobuf:"bytes,2,opt,name=Owner" json:"Owner,omitempty"`
	Repo     string `protobuf:"bytes,3,opt,name=Repo" json:"Repo,omitempty"`
	Stateful bool   `protobuf:"varint,4,opt,name=Stateful" json:"Stateful,omitempty"`
}

func (m *ApplicationCreate) Reset()                    { *m = ApplicationCreate{} }
func (m *ApplicationCreate) String() string            { return proto.CompactTextString(m) }
func (*ApplicationCreate) ProtoMessage()               {}
func (*ApplicationCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApplicationCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationCreate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ApplicationCreate) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *ApplicationCreate) GetStateful() bool {
	if m != nil {
		return m.Stateful
	}
	return false
}

type ApplicationGet struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ApplicationGet) Reset()                    { *m = ApplicationGet{} }
func (m *ApplicationGet) String() string            { return proto.CompactTextString(m) }
func (*ApplicationGet) ProtoMessage()               {}
func (*ApplicationGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApplicationGet) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ApplicationGet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ApplicationList struct {
	Applications []*Application `protobuf:"bytes,1,rep,name=Applications" json:"Applications,omitempty"`
}

func (m *ApplicationList) Reset()                    { *m = ApplicationList{} }
func (m *ApplicationList) String() string            { return proto.CompactTextString(m) }
func (*ApplicationList) ProtoMessage()               {}
func (*ApplicationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApplicationList) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type Application struct {
	ID        string      `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Owner     string      `protobuf:"bytes,3,opt,name=Owner" json:"Owner,omitempty"`
	Repo      string      `protobuf:"bytes,4,opt,name=Repo" json:"Repo,omitempty"`
	Stateful  bool        `protobuf:"varint,5,opt,name=Stateful" json:"Stateful,omitempty"`
	Pipelines []*Pipeline `protobuf:"bytes,6,rep,name=Pipelines" json:"Pipelines,omitempty"`
	EvnVars   []*EnvVar   `protobuf:"bytes,7,rep,name=EvnVars" json:"EvnVars,omitempty"`
	Volumes   []*Volume   `protobuf:"bytes,8,rep,name=Volumes" json:"Volumes,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Application) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Application) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Application) GetStateful() bool {
	if m != nil {
		return m.Stateful
	}
	return false
}

func (m *Application) GetPipelines() []*Pipeline {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

func (m *Application) GetEvnVars() []*EnvVar {
	if m != nil {
		return m.EvnVars
	}
	return nil
}

func (m *Application) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type Pipeline struct {
	ID          string  `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Application string  `protobuf:"bytes,3,opt,name=Application" json:"Application,omitempty"`
	Order       int32   `protobuf:"varint,4,opt,name=Order" json:"Order,omitempty"`
	Steps       []*Step `protobuf:"bytes,5,rep,name=Steps" json:"Steps,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pipeline) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Pipeline) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pipeline) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *Pipeline) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Pipeline) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type PipelineGet struct {
	Application string `protobuf:"bytes,1,opt,name=Application" json:"Application,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *PipelineGet) Reset()                    { *m = PipelineGet{} }
func (m *PipelineGet) String() string            { return proto.CompactTextString(m) }
func (*PipelineGet) ProtoMessage()               {}
func (*PipelineGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PipelineGet) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *PipelineGet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PipelineList struct {
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=Pipelines" json:"Pipelines,omitempty"`
}

func (m *PipelineList) Reset()                    { *m = PipelineList{} }
func (m *PipelineList) String() string            { return proto.CompactTextString(m) }
func (*PipelineList) ProtoMessage()               {}
func (*PipelineList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PipelineList) GetPipelines() []*Pipeline {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type PipelineCreate struct {
	Application string `protobuf:"bytes,1,opt,name=Application" json:"Application,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *PipelineCreate) Reset()                    { *m = PipelineCreate{} }
func (m *PipelineCreate) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreate) ProtoMessage()               {}
func (*PipelineCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PipelineCreate) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *PipelineCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Step struct {
	ID       string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Pipeline string   `protobuf:"bytes,3,opt,name=Pipeline" json:"Pipeline,omitempty"`
	Type     StepType `protobuf:"varint,4,opt,name=Type,enum=ploioproto.StepType" json:"Type,omitempty"`
	Order    int32    `protobuf:"varint,5,opt,name=Order" json:"Order,omitempty"`
	Memory   string   `protobuf:"bytes,6,opt,name=Memory" json:"Memory,omitempty"`
	Proc     string   `protobuf:"bytes,7,opt,name=Proc" json:"Proc,omitempty"`
	Replicas int32    `protobuf:"varint,8,opt,name=Replicas" json:"Replicas,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Step) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Step) GetPipeline() string {
	if m != nil {
		return m.Pipeline
	}
	return ""
}

func (m *Step) GetType() StepType {
	if m != nil {
		return m.Type
	}
	return StepType_Deploy
}

func (m *Step) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Step) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

func (m *Step) GetProc() string {
	if m != nil {
		return m.Proc
	}
	return ""
}

func (m *Step) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

type StepGet struct {
	Pipeline string `protobuf:"bytes,1,opt,name=Pipeline" json:"Pipeline,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *StepGet) Reset()                    { *m = StepGet{} }
func (m *StepGet) String() string            { return proto.CompactTextString(m) }
func (*StepGet) ProtoMessage()               {}
func (*StepGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StepGet) GetPipeline() string {
	if m != nil {
		return m.Pipeline
	}
	return ""
}

func (m *StepGet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StepList struct {
	Steps []*Step `protobuf:"bytes,1,rep,name=Steps" json:"Steps,omitempty"`
}

func (m *StepList) Reset()                    { *m = StepList{} }
func (m *StepList) String() string            { return proto.CompactTextString(m) }
func (*StepList) ProtoMessage()               {}
func (*StepList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StepList) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type EnvVar struct {
	ID        string     `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Type      EnvVarType `protobuf:"varint,3,opt,name=Type,enum=ploioproto.EnvVarType" json:"Type,omitempty"`
	Key       string     `protobuf:"bytes,4,opt,name=Key" json:"Key,omitempty"`
	Value     string     `protobuf:"bytes,5,opt,name=Value" json:"Value,omitempty"`
	ConfigMap string     `protobuf:"bytes,6,opt,name=ConfigMap" json:"ConfigMap,omitempty"`
}

func (m *EnvVar) Reset()                    { *m = EnvVar{} }
func (m *EnvVar) String() string            { return proto.CompactTextString(m) }
func (*EnvVar) ProtoMessage()               {}
func (*EnvVar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EnvVar) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetType() EnvVarType {
	if m != nil {
		return m.Type
	}
	return EnvVarType_ConfigMap
}

func (m *EnvVar) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EnvVar) GetConfigMap() string {
	if m != nil {
		return m.ConfigMap
	}
	return ""
}

type Volume struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Volume) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Cluster struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Cluster) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ClusterGet struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *ClusterGet) Reset()                    { *m = ClusterGet{} }
func (m *ClusterGet) String() string            { return proto.CompactTextString(m) }
func (*ClusterGet) ProtoMessage()               {}
func (*ClusterGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClusterGet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterList struct {
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=Clusters" json:"Clusters,omitempty"`
}

func (m *ClusterList) Reset()                    { *m = ClusterList{} }
func (m *ClusterList) String() string            { return proto.CompactTextString(m) }
func (*ClusterList) ProtoMessage()               {}
func (*ClusterList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ClusterList) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func init() {
	proto.RegisterType((*ApplicationCreate)(nil), "ploioproto.ApplicationCreate")
	proto.RegisterType((*ApplicationGet)(nil), "ploioproto.ApplicationGet")
	proto.RegisterType((*ApplicationList)(nil), "ploioproto.ApplicationList")
	proto.RegisterType((*Application)(nil), "ploioproto.Application")
	proto.RegisterType((*Pipeline)(nil), "ploioproto.Pipeline")
	proto.RegisterType((*PipelineGet)(nil), "ploioproto.PipelineGet")
	proto.RegisterType((*PipelineList)(nil), "ploioproto.PipelineList")
	proto.RegisterType((*PipelineCreate)(nil), "ploioproto.PipelineCreate")
	proto.RegisterType((*Step)(nil), "ploioproto.Step")
	proto.RegisterType((*StepGet)(nil), "ploioproto.StepGet")
	proto.RegisterType((*StepList)(nil), "ploioproto.StepList")
	proto.RegisterType((*EnvVar)(nil), "ploioproto.EnvVar")
	proto.RegisterType((*Volume)(nil), "ploioproto.Volume")
	proto.RegisterType((*Cluster)(nil), "ploioproto.Cluster")
	proto.RegisterType((*ClusterGet)(nil), "ploioproto.ClusterGet")
	proto.RegisterType((*ClusterList)(nil), "ploioproto.ClusterList")
	proto.RegisterEnum("ploioproto.StepType", StepType_name, StepType_value)
	proto.RegisterEnum("ploioproto.EnvVarType", EnvVarType_name, EnvVarType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PloioAPI service

type PloioAPIClient interface {
	ListApplications(ctx context.Context, in *ApplicationGet, opts ...grpc.CallOption) (*ApplicationList, error)
	GetApplication(ctx context.Context, in *ApplicationGet, opts ...grpc.CallOption) (*Application, error)
	CreateApplication(ctx context.Context, in *ApplicationCreate, opts ...grpc.CallOption) (*Application, error)
	ListClusters(ctx context.Context, in *ClusterGet, opts ...grpc.CallOption) (*ClusterList, error)
	ListPipelines(ctx context.Context, in *PipelineGet, opts ...grpc.CallOption) (*PipelineList, error)
	CreatePipeline(ctx context.Context, in *PipelineCreate, opts ...grpc.CallOption) (*Pipeline, error)
	CreateStep(ctx context.Context, in *Step, opts ...grpc.CallOption) (*Step, error)
	ListStep(ctx context.Context, in *StepGet, opts ...grpc.CallOption) (*StepList, error)
}

type ploioAPIClient struct {
	cc *grpc.ClientConn
}

func NewPloioAPIClient(cc *grpc.ClientConn) PloioAPIClient {
	return &ploioAPIClient{cc}
}

func (c *ploioAPIClient) ListApplications(ctx context.Context, in *ApplicationGet, opts ...grpc.CallOption) (*ApplicationList, error) {
	out := new(ApplicationList)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) GetApplication(ctx context.Context, in *ApplicationGet, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) CreateApplication(ctx context.Context, in *ApplicationCreate, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) ListClusters(ctx context.Context, in *ClusterGet, opts ...grpc.CallOption) (*ClusterList, error) {
	out := new(ClusterList)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/ListClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) ListPipelines(ctx context.Context, in *PipelineGet, opts ...grpc.CallOption) (*PipelineList, error) {
	out := new(PipelineList)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/ListPipelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) CreatePipeline(ctx context.Context, in *PipelineCreate, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) CreateStep(ctx context.Context, in *Step, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/CreateStep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ploioAPIClient) ListStep(ctx context.Context, in *StepGet, opts ...grpc.CallOption) (*StepList, error) {
	out := new(StepList)
	err := grpc.Invoke(ctx, "/ploioproto.PloioAPI/ListStep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PloioAPI service

type PloioAPIServer interface {
	ListApplications(context.Context, *ApplicationGet) (*ApplicationList, error)
	GetApplication(context.Context, *ApplicationGet) (*Application, error)
	CreateApplication(context.Context, *ApplicationCreate) (*Application, error)
	ListClusters(context.Context, *ClusterGet) (*ClusterList, error)
	ListPipelines(context.Context, *PipelineGet) (*PipelineList, error)
	CreatePipeline(context.Context, *PipelineCreate) (*Pipeline, error)
	CreateStep(context.Context, *Step) (*Step, error)
	ListStep(context.Context, *StepGet) (*StepList, error)
}

func RegisterPloioAPIServer(s *grpc.Server, srv PloioAPIServer) {
	s.RegisterService(&_PloioAPI_serviceDesc, srv)
}

func _PloioAPI_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).ListApplications(ctx, req.(*ApplicationGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).GetApplication(ctx, req.(*ApplicationGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).CreateApplication(ctx, req.(*ApplicationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).ListClusters(ctx, req.(*ClusterGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).ListPipelines(ctx, req.(*PipelineGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).CreatePipeline(ctx, req.(*PipelineCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_CreateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Step)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).CreateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/CreateStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).CreateStep(ctx, req.(*Step))
	}
	return interceptor(ctx, in, info, handler)
}

func _PloioAPI_ListStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PloioAPIServer).ListStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploioproto.PloioAPI/ListStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PloioAPIServer).ListStep(ctx, req.(*StepGet))
	}
	return interceptor(ctx, in, info, handler)
}

var _PloioAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ploioproto.PloioAPI",
	HandlerType: (*PloioAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _PloioAPI_ListApplications_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _PloioAPI_GetApplication_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _PloioAPI_CreateApplication_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _PloioAPI_ListClusters_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PloioAPI_ListPipelines_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _PloioAPI_CreatePipeline_Handler,
		},
		{
			MethodName: "CreateStep",
			Handler:    _PloioAPI_CreateStep_Handler,
		},
		{
			MethodName: "ListStep",
			Handler:    _PloioAPI_ListStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x13, 0x27, 0x71, 0x26, 0x69, 0xea, 0x6e, 0x4b, 0x6b, 0xa5, 0x20, 0x45, 0xfb, 0x80,
	0xa2, 0xaa, 0x2a, 0x52, 0x40, 0x42, 0x08, 0x09, 0x29, 0x4d, 0x4a, 0xa8, 0x20, 0x25, 0x72, 0x51,
	0xde, 0x4d, 0xd9, 0x82, 0x85, 0x63, 0x5b, 0xb6, 0x53, 0x94, 0x13, 0xf0, 0xc6, 0x11, 0xb8, 0x01,
	0x57, 0xe1, 0x4c, 0x68, 0x76, 0xfd, 0xb3, 0xa9, 0x9d, 0xca, 0xe2, 0x6d, 0x67, 0xe6, 0xf3, 0xcc,
	0x37, 0xdf, 0xec, 0x8e, 0xa1, 0x65, 0xf9, 0xf6, 0x99, 0x1f, 0x78, 0x91, 0x47, 0xc0, 0x77, 0x3c,
	0xdb, 0xe3, 0x67, 0xba, 0x84, 0xbd, 0x91, 0xef, 0x3b, 0xf6, 0x8d, 0x15, 0xd9, 0x9e, 0x3b, 0x0e,
	0x98, 0x15, 0x31, 0x42, 0x40, 0xbd, 0xb2, 0x96, 0xcc, 0x50, 0xfa, 0xca, 0xa0, 0x65, 0xf2, 0x33,
	0x39, 0x80, 0xfa, 0xc7, 0x1f, 0x2e, 0x0b, 0x8c, 0x2a, 0x77, 0x0a, 0x03, 0x91, 0x26, 0xf3, 0x3d,
	0xa3, 0x26, 0x90, 0x78, 0x26, 0x3d, 0xd0, 0xae, 0x23, 0x2b, 0x62, 0xb7, 0x2b, 0xc7, 0x50, 0xfb,
	0xca, 0x40, 0x33, 0x53, 0x9b, 0xbe, 0x80, 0xae, 0x54, 0x6e, 0xca, 0x22, 0xd2, 0x85, 0xea, 0xe5,
	0x24, 0xae, 0x54, 0xbd, 0x9c, 0xa4, 0xb5, 0xab, 0x59, 0x6d, 0x7a, 0x05, 0xbb, 0xd2, 0x57, 0x1f,
	0xec, 0x30, 0x22, 0xaf, 0xa1, 0x23, 0xb9, 0x42, 0x43, 0xe9, 0xd7, 0x06, 0xed, 0xe1, 0xd1, 0x59,
	0xd6, 0xda, 0x99, 0x14, 0x37, 0x37, 0xc0, 0xf4, 0x67, 0x15, 0xda, 0x92, 0xa3, 0x0c, 0x87, 0xac,
	0xff, 0x5a, 0x51, 0xff, 0xea, 0x96, 0xfe, 0xeb, 0x9b, 0xfd, 0x93, 0x21, 0xb4, 0xe6, 0xb6, 0xcf,
	0x1c, 0xdb, 0x65, 0xa1, 0xd1, 0xe0, 0x9c, 0x0f, 0x64, 0xce, 0x49, 0xd0, 0xcc, 0x60, 0xe4, 0x14,
	0x9a, 0x17, 0x77, 0xee, 0xc2, 0x0a, 0x42, 0xa3, 0xc9, 0xbf, 0x20, 0xf2, 0x17, 0x17, 0xee, 0xdd,
	0xc2, 0x0a, 0xcc, 0x04, 0x82, 0xe8, 0x85, 0xe7, 0xac, 0x96, 0x2c, 0x34, 0xb4, 0x3c, 0x5a, 0x84,
	0xcc, 0x04, 0x42, 0x7f, 0x29, 0xa0, 0x25, 0x95, 0x4a, 0xc9, 0xd0, 0xdf, 0x50, 0x2e, 0x16, 0x63,
	0x43, 0x4c, 0x14, 0x2a, 0xf8, 0xc2, 0x02, 0xae, 0x49, 0xdd, 0x14, 0x06, 0x79, 0x0a, 0xf5, 0xeb,
	0x88, 0xf9, 0xa1, 0x51, 0xe7, 0xa4, 0x74, 0x99, 0x14, 0x06, 0x4c, 0x11, 0xa6, 0x63, 0x68, 0x27,
	0x7c, 0xf0, 0x76, 0xdc, 0x2b, 0xa7, 0xe4, 0xcb, 0x15, 0xdd, 0x97, 0x73, 0xe8, 0x24, 0x49, 0xf8,
	0x65, 0xd9, 0x50, 0x5d, 0x29, 0xa5, 0x3a, 0x7d, 0x0b, 0xdd, 0xc4, 0x88, 0x5f, 0xc5, 0xff, 0x71,
	0xf9, 0xab, 0x80, 0x8a, 0xad, 0x95, 0x52, 0xb7, 0x97, 0x4d, 0x23, 0x96, 0x36, 0x9b, 0xce, 0x00,
	0xd4, 0x4f, 0x6b, 0x9f, 0x71, 0x59, 0xbb, 0x9b, 0xfc, 0x31, 0x3f, 0xc6, 0x4c, 0x8e, 0xc8, 0x26,
	0x50, 0x97, 0x27, 0x70, 0x08, 0x8d, 0x19, 0x5b, 0x7a, 0xc1, 0xda, 0x68, 0xf0, 0xcc, 0xb1, 0x85,
	0x3c, 0xe6, 0x81, 0x77, 0x63, 0x34, 0x05, 0x0f, 0x3c, 0x23, 0x0f, 0x93, 0xf1, 0xbe, 0xf0, 0x16,
	0x61, 0x92, 0xd4, 0xa6, 0xaf, 0xa0, 0x89, 0xf5, 0x70, 0x3a, 0x32, 0x5d, 0xe5, 0x1e, 0xdd, 0x22,
	0x2d, 0x86, 0xf8, 0x32, 0x98, 0xcf, 0x67, 0x92, 0x5e, 0x08, 0xe5, 0xe1, 0x0b, 0xf1, 0x5b, 0x81,
	0x86, 0xb8, 0xe3, 0xa5, 0x14, 0x3c, 0x89, 0x55, 0xaa, 0x71, 0x95, 0x0e, 0xf3, 0x2f, 0x45, 0xd2,
	0x49, 0x87, 0xda, 0x7b, 0xb6, 0x8e, 0xdf, 0x2e, 0x1e, 0x51, 0xb9, 0x85, 0xe5, 0xac, 0x18, 0x57,
	0xae, 0x65, 0x0a, 0x83, 0x3c, 0x86, 0xd6, 0xd8, 0x73, 0x6f, 0xed, 0xaf, 0x33, 0xcb, 0x8f, 0xc5,
	0xcb, 0x1c, 0xf4, 0x14, 0x1a, 0xe2, 0x35, 0x95, 0x5a, 0x65, 0x23, 0x68, 0x8e, 0x9d, 0x55, 0x18,
	0xb1, 0x72, 0xed, 0x10, 0x50, 0xdf, 0x79, 0x61, 0x94, 0xec, 0x57, 0x3c, 0xd3, 0x3e, 0x40, 0x9c,
	0x02, 0x67, 0x50, 0xb0, 0xab, 0xe9, 0x1b, 0x68, 0xc7, 0x08, 0x2e, 0xf5, 0x33, 0xd0, 0x62, 0x33,
	0x51, 0x7b, 0x5f, 0xd6, 0x25, 0x8e, 0x99, 0x29, 0xe8, 0x84, 0x89, 0x39, 0x71, 0x91, 0x00, 0x1a,
	0x13, 0xe6, 0x3b, 0xde, 0x5a, 0xaf, 0x90, 0x7d, 0xd8, 0x15, 0xe7, 0x73, 0x67, 0xc5, 0xa6, 0x01,
	0x63, 0xae, 0xae, 0x10, 0x1d, 0x3a, 0xc2, 0x39, 0xb6, 0x5c, 0x2b, 0x58, 0xeb, 0x55, 0xf2, 0x08,
	0xf6, 0x84, 0x67, 0x66, 0xb9, 0x2b, 0xcb, 0x19, 0x7f, 0x63, 0x37, 0xdf, 0xf5, 0x1a, 0xd9, 0x85,
	0xb6, 0xec, 0x50, 0x4f, 0x8e, 0x01, 0xb2, 0x99, 0x90, 0x1d, 0x49, 0x65, 0xbd, 0x32, 0xfc, 0xa3,
	0x82, 0x36, 0x47, 0x92, 0xa3, 0xf9, 0x25, 0x99, 0x81, 0x8e, 0x9d, 0xc8, 0x4b, 0x9c, 0xf4, 0xb6,
	0xec, 0xfa, 0x29, 0x8b, 0x7a, 0xc7, 0x5b, 0x62, 0x98, 0x84, 0x56, 0xc8, 0x14, 0xba, 0x53, 0x26,
	0x67, 0x7b, 0x30, 0xd9, 0xb6, 0x9f, 0x0a, 0xad, 0x90, 0x19, 0xec, 0x89, 0xe5, 0x20, 0xe7, 0x7a,
	0xb2, 0x05, 0x2f, 0x90, 0x0f, 0xa5, 0x1b, 0x41, 0x07, 0x19, 0x26, 0x73, 0x20, 0x87, 0x05, 0x63,
	0xca, 0x31, 0x92, 0x26, 0x4d, 0x2b, 0x64, 0x02, 0x3b, 0x78, 0xca, 0xfe, 0x1e, 0x47, 0x45, 0x8b,
	0x0e, 0x93, 0x18, 0x45, 0x81, 0x34, 0x4b, 0x57, 0xb0, 0x4d, 0x9f, 0x73, 0xaf, 0x08, 0x1d, 0x77,
	0x54, 0xb8, 0x4b, 0x69, 0x85, 0x0c, 0x01, 0x04, 0x82, 0xef, 0xbf, 0xdc, 0x0b, 0xef, 0xe5, 0x3c,
	0xb4, 0x42, 0x5e, 0x82, 0x86, 0x1c, 0xf8, 0x17, 0xfb, 0xf7, 0xe3, 0x48, 0x3b, 0xb7, 0xf8, 0x04,
	0xe5, 0xcf, 0x0d, 0xee, 0x79, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x4e, 0x58, 0x9a, 0xe8,
	0x08, 0x00, 0x00,
}
