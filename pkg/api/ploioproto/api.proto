syntax = "proto3";
package ploioproto;

service PloioAPI {
  rpc ListApplications (ApplicationGet) returns (ApplicationList) {}
  rpc GetApplication (ApplicationGet) returns (Application) {}
  rpc CreateApplication (ApplicationCreate) returns (Application) {}
  rpc ListClusters (ClusterGet) returns (ClusterList) {}
  rpc ListPipelines (PipelineGet) returns (PipelineList) {}
  rpc CreatePipeline (PipelineCreate) returns (Pipeline) {}
  rpc CreateStage (Stage) returns (Stage) {}
  rpc ListStage (StageGet) returns (StageList) {}
}



message ApplicationCreate {
    string Name = 1;
    string Owner = 2;
    string Repo = 3;
    bool Stateful = 4;
}

message ApplicationGet {
    int32 ID = 1;
    string Name = 2;
}

message ApplicationList {
    repeated Application Applications = 1;
}


message Application {
    int32 ID = 1;
    string Name = 2;
    string Owner = 3;
    string Repo = 4;
    bool Stateful = 5;

    repeated Pipeline Pipelines = 6;
    repeated EnvVar EvnVars = 7;
    repeated Volume Volumes = 8;
}

message Pipeline {
    int32 ID = 1;
    string Name = 2;
    int32 Order = 3;
    repeated Stage Stages = 4;
}

message PipelineGet {
    string Application = 1;
    string Name = 2;
}

message PipelineList {
    repeated Pipeline Pipelines = 1;
}

message PipelineCreate {
    string Application = 1;
    string Name = 2;
}

message Stage {
    int32 ID = 1;
    string Name = 2;
    StageType Type = 3;
    int32 Order = 4;
    string Strategy = 5;
    string Namespace = 6;
    string Memory = 7;
    string Proc = 8;
    int32 Replicas = 9;
    int32 MaxUnavailable = 10;
    int32 MaxSurge = 11;
    bool NotifyEmail = 12;
    bool NotifySlack = 13;
    string SmokeHeaderKey = 14;
    string SmokeHeaderVal = 15;
    int32 CanaryPercentage = 16;
}

message StageGet {
    string Pipeline = 1;
    string Name = 2;
}

message StageList {
    repeated Stage Stages = 1;
}

enum StageType {
   Deploy = 0; 
   Check = 1;
   Teardown = 2;
   Wait = 3;
}

message EnvVar {
    int32 ID = 1;
    string Name = 2;
    EnvVarType Type = 3;
    string Key = 4;
    string Value = 5;
    string ConfigMap = 6;
}

enum EnvVarType {
    ConfigMap = 0;
}

message Volume {
    int32 ID = 1;
    string Name = 2;
}

message Cluster {
    int32 ID = 1;
    string Name = 2;
    string Host = 3;
}

message ClusterGet {
    string Name = 1;
}

message ClusterList {
    repeated Cluster Clusters = 1;
}

message Service {
    string Name = 1;
    string Application = 2;
    ServiceType type = 3;
    repeated Port Ports = 4;
}

enum ServiceType {
    ClusterIP = 0;
    NodePort = 1;
    LoadBalancer = 2;
    ExternalName = 3;
}

message Port {
    string Name = 1;
    string Protocol = 2;
    string Port = 3;
    string TargetPort = 4;
    string NodePort = 5;
}

